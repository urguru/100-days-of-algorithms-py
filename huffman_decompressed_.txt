v,y,xy,xy,x s2H-7cdcB.ptUI jP™Ct pieErqpieErqprq qeER27BpR7B
0ETmwhd-jBcyAUgvT)Câed
ewfrewfrqwrewfrHuffman Coding - Python Implementation
Huffman Coding is one of the lossless data compression techniques. It assigns variable-length codes to the input characters, based on the frequencies of their occurence. The most frequent character is given the smallest length code.
HuffmanCoding


I thought of implementing the data compression program. The key things in the implementation were:

Building frequency dictionary

Select 2 minimum frequency symbols and merge them repeatedly: Used Min Heap

Build a tree of the above process: Created a HeapNode class and used objects to maintain tree structure

Assign code to characters: Recursively traversed the tree and assigned the corresponding codes

Encode the input text. Added padding to the encoded text, if itâ€™s not of a length of multiple of 8. Stored this padding information, in 8 bits, in the beginning of the resultant code.

Write the result to an output binary file, which will be our compressed file.

End result
After running on a several sample text files, Compression Ratio on an average was achieved to be 2.1 : 1.

So itâ€™s like you have your very own text file compression program.

I implemented both the compression and decompression functions. Decompressing the compressed file brought back the original state of the file, without any data loss.

Before you look at the code from beginning, first check out the outline of the 2 functions compress (line 101) and decompress (line 157) , and then look at details of the other functions called from them.